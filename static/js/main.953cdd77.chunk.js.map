{"version":3,"sources":["Images/pic.jpg","Components/Title.js","Components/AsciiWriter.js","Views/Empty.js","Views/Welcome.js","Views/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","props","color","className","text","AsciiWriter","ascii","font","figlet","err","data","options","onInit","typewriter","changeDelay","typeString","start","Empty","Welcome","parseFont","standard","small","profilepic","require","About","imgdiv","id","show","setTimeout","document","getElementById","classList","add","e","console","error","aalib","read","image","fromURL","map","aa","width","height","colored","render","html","fontSize","fontFamily","background","do","el","appendChild","subscribe","App","container","overlay","log","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,iC,iJCE5B,SAASC,EAAMC,GAE1B,IAAIC,EAAQD,EAAMC,MAAQD,EAAMC,MAAQ,WAExC,OACI,uBAAGC,UAAS,qBAAgBD,EAAhB,wBAA6CD,EAAMG,M,mECExD,SAASC,EAAYJ,GAEhC,IAIIK,EAJAJ,EAAQD,EAAMC,MAAQD,EAAMC,MAAQ,QAEpCK,EAAON,EAAMM,KAAON,EAAMM,KAAO,WAGrCC,IAAOJ,KAAKH,EAAMG,KAAM,CACpBG,KAAMA,IACP,SAASE,EAAKC,GACbJ,EAAQI,KAQZ,OACI,yBAAKP,UAAS,eAAUD,IACpB,6BACA,kBAAC,IAAD,CACIS,QAAS,CACL,eAAiB,EACjB,YAAe,EACf,MAAS,GAEbC,OAAQ,SAACC,GACLA,EAAWC,YAAY,GACtBC,WAAWT,GACXU,aCpCN,SAASC,IAEpB,OACI,yBAAKd,UAAU,cACX,kBAACE,EAAD,CAAaD,KAAK,MCJf,SAASc,IAEpB,OACI,yBAAKf,UAAU,cACX,kBAACE,EAAD,CAAaD,KAAK,QAAQG,KAAK,cFD3CC,IAAOW,UAAU,WAAYC,KAC7BZ,IAAOW,UAAU,QAASE,K,oBGJpBC,EAAaC,EAAQ,IAEZ,SAASC,IAEpB,IAEIC,EAAS,yBAAKC,GAAG,SAASvB,UAAS,sFAFnCwB,KAuBJ,OAnBAC,YAAW,WACP,IACWC,SAASC,eAAe,UAC9BC,UAAUC,IAAI,QACRH,SAASC,eAAe,QAC9BC,UAAUC,IAAI,QACjB,MAAOC,GACLC,QAAQC,MAAMF,MAEnB,KAEHG,IAAMC,KAAKC,MAAMC,QAAQjB,GACxBkB,IAAIJ,IAAMK,GAAG,CAAEC,MAAO,IAAKC,OAAQ,GAAIC,SAAS,KAChDJ,IAAIJ,IAAMS,OAAOC,KAAK,CAAEC,SAAU,EAAGC,WAAY,YAAaC,WAAY,iBAC1EC,IAAG,SAAUC,GACVtB,SAASC,eAAe,UAAUsB,YAAYD,MAEjDE,YAIG,yBAAKlD,UAAU,cACX,kBAACE,EAAD,CAAaD,KAAK,QAAQG,KAAK,UAC9BkB,EACD,wBAAIC,GAAG,OAAOvB,UAAU,+BACpB,mCACA,wCACA,yCCWDmD,MAnCf,WAEE,IAAIC,EACAC,EAAU,SAOd,OAFAtB,QAAQuB,KAVE,GAaR,yBAAKtD,UAAS,UAAKoD,EAAL,uEACZ,kBAAC,IAAD,KACA,yBAAKpD,UAAU,2CACf,kBAAC,IAAD,CAAMA,UAAU,OAAOuD,GAAG,YAAW,kBAAC1D,EAAD,CAAOI,KAAK,aACjD,kBAAC,IAAD,CAAMD,UAAU,OAAOuD,GAAG,UAAS,kBAAC1D,EAAD,CAAOI,KAAK,WAE7C,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IAEjC,kBAAC,IAAD,CAAO2C,KAAK,WAAWC,UAAW3C,IAElC,kBAAC,IAAD,CAAO0C,KAAK,SAASC,UAAWrC,IAEhC,kBAAC,IAAD,CAAOoC,KAAK,iBAKhB,yBAAKzD,UAAS,0BAAqBqD,IAAnC,SChCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAAStB,OACP,kBAAC,IAAMuB,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASC,eAAe,SDsHpB,kBAAmBuC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLD,QAAQC,MAAMA,EAAMyC,c","file":"static/js/main.953cdd77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic.0efc1870.jpg\";","import React from 'react'\r\n\r\nexport default function Title(props) {\r\n\r\n    let color = props.color ? props.color : \"gray-100\"\r\n\r\n    return (\r\n        <p className={`title text-${color} font-code text-2xl`}>{props.text}</p>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport figlet from 'figlet';\r\nimport standard from 'figlet/importable-fonts/Standard.js'\r\nimport small from 'figlet/importable-fonts/Small.js'\r\nimport Typewriter from 'typewriter-effect';\r\n\r\nfiglet.parseFont('Standard', standard);\r\nfiglet.parseFont('small', small);\r\n\r\nexport default function AsciiWriter(props) {\r\n\r\n    let color = props.color ? props.color : 'white'\r\n\r\n    let font = props.font ? props.font : 'Standard'\r\n\r\n    let ascii;\r\n    figlet.text(props.text, {\r\n        font: font,\r\n    }, function(err, data) {\r\n        ascii = data;\r\n    });\r\n\r\n    let menuItems = {\r\n        'name': \"Jan\",\r\n        'age': \"15\"\r\n    }\r\n\r\n    return (\r\n        <div className={`text-${color}`}>\r\n            <pre>\r\n            <Typewriter\r\n                options={{\r\n                    'skipAddStyles': true,\r\n                    'deleteSpeed': 1,\r\n                    'delay': 1\r\n                }}\r\n                onInit={(typewriter) => {\r\n                    typewriter.changeDelay(1)\r\n                    .typeString(ascii)\r\n                    .start();\r\n                 }}\r\n            />\r\n            </pre>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AsciiWriter from '../Components/AsciiWriter'\r\n\r\nexport default function Empty() {\r\n\r\n    return (\r\n        <div className=\"text-white\">\r\n            <AsciiWriter text=\"\"></AsciiWriter>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AsciiWriter from '../Components/AsciiWriter'\r\n\r\nexport default function Welcome() {\r\n\r\n    return (\r\n        <div className=\"text-white\">\r\n            <AsciiWriter text=\"hello\" font=\"Standard\"></AsciiWriter>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport AsciiWriter from '../Components/AsciiWriter'\r\nimport aalib from \"aalib.js\";\r\nconst profilepic = require('../Images/pic.jpg')\r\n\r\nexport default function About() {\r\n\r\n    let show;\r\n\r\n    let imgdiv = <div id=\"imgdiv\" className={`hide overflow-hidden font-code ml-3 mb-3 aa-image w-64 h-64 text-white ${show}`}></div>\r\n\r\n    setTimeout(() => {\r\n        try {\r\n        let idiv = document.getElementById('imgdiv')\r\n        idiv.classList.add(\"show\")\r\n        let list = document.getElementById('list')\r\n        list.classList.add(\"show\")\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }, 3000);\r\n\r\n    aalib.read.image.fromURL(profilepic)\r\n    .map(aalib.aa({ width: 100, height: 40, colored: true }))\r\n    .map(aalib.render.html({ fontSize: 4, fontFamily: \"fira code\", background: \"transparent\" }))\r\n    .do(function (el) {\r\n        document.getElementById('imgdiv').appendChild(el);\r\n    })\r\n    .subscribe();\r\n\r\n    return (\r\n\r\n        <div className=\"text-white\">\r\n            <AsciiWriter text=\"about\" font=\"small\"></AsciiWriter>\r\n            {imgdiv}\r\n            <ul id='list' className=\"hide text-xl font-code ml-3\">\r\n                <li>jan</li>\r\n                <li>15 years</li>\r\n                <li>germany</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Title from './Components/Title'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom'\r\nimport Empty from './Views/Empty'\r\nimport Welcome from './Views/Welcome'\r\nimport About from './Views/About'\r\n\r\nvar crton = false\r\n\r\nfunction App() {\r\n\r\n  let container\r\n  let overlay = \"hidden\"\r\n  if (crton) {\r\n    container = \"crt-container\"\r\n    overlay = \"crt-overlay\"\r\n  }\r\n  console.log(crton)\r\n\r\n  return (\r\n    <div className={`${container} w-screen h-screen overflow-x-hidden App flex flex-col bg-gray-900`}>\r\n      <Router>\r\n      <div className=\"App bg-gray-900 flex flex-col px-6 py-8\">\r\n      <Link className=\"mb-4\" to=\"/welcome\"><Title text=\"welcome\"></Title></Link>\r\n      <Link className=\"mb-4\" to=\"/about\"><Title text=\"about\"></Title></Link>\r\n\r\n        <Switch>\r\n\r\n          <Route exact path=\"/\" component={Empty}/>\r\n\r\n          <Route path=\"/welcome\" component={Welcome}/>\r\n\r\n          <Route path=\"/about\" component={About}/>\r\n\r\n          <Route path=\"/expenses\" />\r\n\r\n        </Switch>\r\n      </div>\r\n      </Router>\r\n      <div className={`z-50 text-green ${overlay}`}>AV1</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//       <Link className=\"mb-4\" to=\"/projects\"><Title text=\"projects\"></Title></Link>\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './tailwind.output.css'\r\nimport './Css/crt.css'\r\nimport './Css/style.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}